from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, filters, ConversationHandler, CallbackQueryHandler
from database import save_user_profile, get_user_profile
from utils import contains_numbers, is_valid_phone

import re

# Conversation states for editing
EDIT_FIELD_SELECT, EDIT_PARENT_NAME, EDIT_CHILD_NAME, EDIT_AGE, EDIT_GRADE, EDIT_GOAL, EDIT_TIMEZONE, EDIT_CONTACT = range(8)

async def edit_profile_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Start the profile editing process"""
    user_id = update.effective_user.id
    user_profile = get_user_profile(user_id)

    if not user_profile:
        await update.message.reply_text(
            "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è. –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å.",
            reply_markup=ReplyKeyboardRemove()
        )
        # Import and call main menu function here
        from handlers.profile_handler import send_main_menu
        await send_main_menu(update, context)
        return ConversationHandler.END

    # Store current profile data
    context.user_data['current_profile'] = user_profile

    # Create inline keyboard for field selection
    keyboard = [
        [InlineKeyboardButton("üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –§–ò–û —Ä–æ–¥–∏—Ç–µ–ª—è", callback_data="edit_parent_name")],
        [InlineKeyboardButton("üßí –§–ò–û —Ä–µ–±—ë–Ω–∫–∞", callback_data="edit_child_name")],
        [InlineKeyboardButton("üéÇ –í–æ–∑—Ä–∞—Å—Ç", callback_data="edit_age")],
        [InlineKeyboardButton("üè´ –ö–ª–∞—Å—Å", callback_data="edit_grade")],
        [InlineKeyboardButton("üéØ –¶–µ–ª—å –æ–±—É—á–µ–Ω–∏—è", callback_data="edit_goal")],
        [InlineKeyboardButton("üåç –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å", callback_data="edit_timezone")],
        [InlineKeyboardButton("üì± –ö–æ–Ω—Ç–∞–∫—Ç", callback_data="edit_contact")],
        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_edit")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    # Show current profile and options
    profile_text = (
        "üõ†Ô∏è **–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è**\n\n"
        "**–¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ:**\n"
        f"üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –§–ò–û —Ä–æ–¥–∏—Ç–µ–ª—è: {user_profile['parent_name']}\n"
        f"üßí –§–ò–û —Ä–µ–±—ë–Ω–∫–∞: {user_profile['child_name']}\n"
        f"üéÇ –í–æ–∑—Ä–∞—Å—Ç: {user_profile['age']}\n"
        f"üè´ –ö–ª–∞—Å—Å: {user_profile['grade']}\n"
        f"üéØ –¶–µ–ª—å –æ–±—É—á–µ–Ω–∏—è: {user_profile['goal']}\n"
        f"üåç –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {user_profile['timezone']}\n"
        f"üì± –ö–æ–Ω—Ç–∞–∫—Ç: {user_profile['contact']}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:"
    )

    # Hide main menu keyboard and show edit options
    await update.message.reply_text(
        profile_text,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

    # Remove the main menu keyboard
    await update.message.reply_text(
        "üîß –†–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω...",
        reply_markup=ReplyKeyboardRemove()
    )

    return EDIT_FIELD_SELECT

async def handle_field_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle field selection for editing"""
    query = update.callback_query
    await query.answer()

    field = query.data
    current_profile = context.user_data['current_profile']

    if field == "cancel_edit" or field == "back_to_main":
        await query.edit_message_text("üè† –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...")
        from handlers.profile_handler import send_main_menu
        await send_main_menu(update, context)
        context.user_data.clear()
        return ConversationHandler.END

    # Create a "Back" and "Cancel" keyboard for text input fields
    back_keyboard = [
        [KeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –ø–æ–ª—è")],
        [KeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")],
        [KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞")]
    ]
    back_reply_markup = ReplyKeyboardMarkup(back_keyboard, resize_keyboard=True)

    if field == "edit_parent_name":
        await query.edit_message_text(
            f"üë®‚Äçüë©‚Äçüëß‚Äçüë¶ **–ò–∑–º–µ–Ω–µ–Ω–∏–µ –§–ò–û —Ä–æ–¥–∏—Ç–µ–ª—è**\n\n"
            f"–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {current_profile['parent_name']}\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –§–ò–û —Ä–æ–¥–∏—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã):",
            parse_mode='Markdown'
        )
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=back_reply_markup
        )
        return EDIT_PARENT_NAME

    elif field == "edit_child_name":
        await query.edit_message_text(
            f"üßí **–ò–∑–º–µ–Ω–µ–Ω–∏–µ –§–ò–û —Ä–µ–±—ë–Ω–∫–∞**\n\n"
            f"–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {current_profile['child_name']}\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –§–ò–û —Ä–µ–±—ë–Ω–∫–∞ (—Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã):",
            parse_mode='Markdown'
        )
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=back_reply_markup
        )
        return EDIT_CHILD_NAME

    elif field == "edit_age":
        await query.edit_message_text(
            f"üéÇ **–ò–∑–º–µ–Ω–µ–Ω–∏–µ –≤–æ–∑—Ä–∞—Å—Ç–∞**\n\n"
            f"–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {current_profile['age']}\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –≤–æ–∑—Ä–∞—Å—Ç (–æ—Ç 1 –¥–æ 18):",
            parse_mode='Markdown'
        )
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=back_reply_markup
        )
        return EDIT_AGE

    elif field == "edit_grade":
        await query.edit_message_text(
            f"üè´ **–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–ª–∞—Å—Å–∞**\n\n"
            f"–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {current_profile['grade']}\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∫–ª–∞—Å—Å (—á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 11):",
            parse_mode='Markdown'
        )
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=back_reply_markup
        )
        return EDIT_GRADE

    elif field == "edit_goal":
        await query.edit_message_text(
            f"üéØ **–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–ª–∏ –æ–±—É—á–µ–Ω–∏—è**\n\n"
            f"–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {current_profile['goal']}\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–ª—å –æ–±—É—á–µ–Ω–∏—è:",
            parse_mode='Markdown'
        )
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=back_reply_markup
        )
        return EDIT_GOAL

    elif field == "edit_timezone":
        timezone_keyboard = [
            [KeyboardButton("UTC+3"), KeyboardButton("UTC+4"), KeyboardButton("UTC+5")],
            [KeyboardButton("–î—Ä—É–≥–æ–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å")],
            [KeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –ø–æ–ª—è")],
            [KeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"), KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞")]
        ]
        reply_markup = ReplyKeyboardMarkup(timezone_keyboard, resize_keyboard=True)

        await query.edit_message_text(
            f"üåç **–ò–∑–º–µ–Ω–µ–Ω–∏–µ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞**\n\n"
            f"–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {current_profile['timezone']}",
            parse_mode='Markdown'
        )
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å:",
            reply_markup=reply_markup
        )
        return EDIT_TIMEZONE

    elif field == "edit_contact":
        contact_keyboard = [
            [KeyboardButton("Telegram")],
            [KeyboardButton("WhatsApp")],
            [KeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –ø–æ–ª—è")],
            [KeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"), KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞")]
        ]
        reply_markup = ReplyKeyboardMarkup(contact_keyboard, resize_keyboard=True)

        await query.edit_message_text(
            f"üì± **–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞**\n\n"
            f"–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {current_profile['contact']}",
            parse_mode='Markdown'
        )
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Å–ø–æ—Å–æ–± —Å–≤—è–∑–∏:",
            reply_markup=reply_markup
        )
        return EDIT_CONTACT

# Individual field edit handlers
async def edit_parent_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle parent name editing"""
    if await handle_navigation_buttons(update, context):
        return ConversationHandler.END

    new_value = update.message.text.strip()

    # Validation: check if name contains numbers
    if contains_numbers(new_value):
        await update.message.reply_text(
            "‚ùå –§–ò–û —Ä–æ–¥–∏—Ç–µ–ª—è –Ω–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ü–∏—Ñ—Ä—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã:"
        )
        return EDIT_PARENT_NAME

    # Check if name is not empty and has reasonable length
    if len(new_value) < 2:
        await update.message.reply_text(
            "‚ùå –§–ò–û —Ä–æ–¥–∏—Ç–µ–ª—è —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω–æ–µ –§–ò–û:"
        )
        return EDIT_PARENT_NAME

    await save_field_and_finish(update, context, 'parent_name', new_value, "üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –§–ò–û —Ä–æ–¥–∏—Ç–µ–ª—è")
    return ConversationHandler.END

async def edit_child_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle child name editing"""
    if await handle_navigation_buttons(update, context):
        return ConversationHandler.END

    new_value = update.message.text.strip()

    # Validation: check if name contains numbers
    if contains_numbers(new_value):
        await update.message.reply_text(
            "‚ùå –§–ò–û —Ä–µ–±—ë–Ω–∫–∞ –Ω–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ü–∏—Ñ—Ä—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã:"
        )
        return EDIT_CHILD_NAME

    # Check if name is not empty and has reasonable length
    if len(new_value) < 2:
        await update.message.reply_text(
            "‚ùå –§–ò–û —Ä–µ–±—ë–Ω–∫–∞ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω–æ–µ –§–ò–û:"
        )
        return EDIT_CHILD_NAME

    await save_field_and_finish(update, context, 'child_name', new_value, "üßí –§–ò–û —Ä–µ–±—ë–Ω–∫–∞")
    return ConversationHandler.END

async def edit_age(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle age editing"""
    if await handle_navigation_buttons(update, context):
        return ConversationHandler.END

    try:
        age_value = int(update.message.text.strip())
        if age_value < 1 or age_value > 18:
            await update.message.reply_text(
                "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç (–æ—Ç 1 –¥–æ 18 –ª–µ—Ç):"
            )
            return EDIT_AGE

        await save_field_and_finish(update, context, 'age', age_value, "üéÇ –í–æ–∑—Ä–∞—Å—Ç")
        return ConversationHandler.END
    except ValueError:
        await update.message.reply_text(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç —Ü–∏—Ñ—Ä–∞–º–∏:"
        )
        return EDIT_AGE

async def edit_grade(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle grade editing"""
    if await handle_navigation_buttons(update, context):
        return ConversationHandler.END

    try:
        grade_value = int(update.message.text.strip())
        if grade_value < 1 or grade_value > 11:
            await update.message.reply_text(
                "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∫–ª–∞—Å—Å (–æ—Ç 1 –¥–æ 11):"
            )
            return EDIT_GRADE

        await save_field_and_finish(update, context, 'grade', grade_value, "üè´ –ö–ª–∞—Å—Å")
        return ConversationHandler.END
    except ValueError:
        await update.message.reply_text(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–ª–∞—Å—Å —Ü–∏—Ñ—Ä–∞–º–∏:"
        )
        return EDIT_GRADE

async def edit_goal(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle goal editing"""
    if await handle_navigation_buttons(update, context):
        return ConversationHandler.END

    new_value = update.message.text.strip()

    # Basic validation for goal
    if len(new_value) < 5:
        await update.message.reply_text(
            "‚ùå –¶–µ–ª—å –æ–±—É—á–µ–Ω–∏—è —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∞—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ —Ü–µ–ª—å –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ:"
        )
        return EDIT_GOAL

    await save_field_and_finish(update, context, 'goal', new_value, "üéØ –¶–µ–ª—å –æ–±—É—á–µ–Ω–∏—è")
    return ConversationHandler.END

async def edit_timezone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle timezone editing"""
    timezone_text = update.message.text.strip()

    if await handle_navigation_buttons(update, context):
        return ConversationHandler.END

    if timezone_text == "–î—Ä—É–≥–æ–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å":
        back_keyboard = [
            [KeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –ø–æ–ª—è")],
            [KeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")],
            [KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞")]
        ]
        await update.message.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –≤—Ä—É—á–Ω—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä, UTC+3, UTC-5, GMT+2):",
            reply_markup=ReplyKeyboardMarkup(back_keyboard, resize_keyboard=True)
        )
        return EDIT_TIMEZONE

    # Basic validation for custom timezone format
    if not timezone_text.startswith(('UTC', 'GMT')) and timezone_text not in ['UTC+3', 'UTC+4', 'UTC+5']:
        # Check if it's a manual timezone input
        if 'UTC' in timezone_text or 'GMT' in timezone_text:
            # Allow it if it contains UTC or GMT
            pass
        else:
            await update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç UTC+3, GMT+2 –∏ —Ç.–¥.:"
            )
            return EDIT_TIMEZONE

    await save_field_and_finish(update, context, 'timezone', timezone_text, "üåç –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å")
    return ConversationHandler.END

async def edit_contact(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle contact editing"""
    contact_method = update.message.text.strip()

    if await handle_navigation_buttons(update, context):
        return ConversationHandler.END

    if contact_method == "Telegram":
        username = update.effective_user.username
        if username:
            new_contact = f"Telegram: @{username}"
        else:
            new_contact = f"Telegram: {update.effective_user.first_name}"
        await save_field_and_finish(update, context, 'contact', new_contact, "üì± –ö–æ–Ω—Ç–∞–∫—Ç")
        return ConversationHandler.END

    elif contact_method == "WhatsApp":
        back_keyboard = [
            [KeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –ø–æ–ª—è")],
            [KeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")],
            [KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞")]
        ]
        await update.message.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä WhatsApp (–≤ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä +7xxxxxxxxxx):",
            reply_markup=ReplyKeyboardMarkup(back_keyboard, resize_keyboard=True)
        )
        context.user_data['editing_whatsapp'] = True
        return EDIT_CONTACT

    else:
        # Handle WhatsApp number input
        if context.user_data.get('editing_whatsapp'):
            phone_number = contact_method.strip()

            # Validate phone number
            if not is_valid_phone(phone_number):
                await update.message.reply_text(
                    "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ (+7xxxxxxxxxx):"
                )
                return EDIT_CONTACT

            new_contact = f"WhatsApp: {phone_number}"
            context.user_data.pop('editing_whatsapp', None)
            await save_field_and_finish(update, context, 'contact', new_contact, "üì± –ö–æ–Ω—Ç–∞–∫—Ç")
            return ConversationHandler.END
        else:
            # Invalid input
            await update.message.reply_text(
                "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ Telegram –∏–ª–∏ WhatsApp, –ª–∏–±–æ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏."
            )
            return EDIT_CONTACT

async def handle_navigation_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle navigation buttons (Back, Main Menu, Cancel)"""
    text = update.message.text

    if text == "üîô –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –ø–æ–ª—è":
        await back_to_field_selection(update, context)
        return True
    elif text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await go_to_main_menu(update, context)
        return True
    elif text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await cancel_edit(update, context)
        return True

    return False

async def back_to_field_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Go back to field selection"""
    current_profile = context.user_data.get('current_profile')
    if not current_profile:
        await go_to_main_menu(update, context)
        return

    # Create inline keyboard for field selection
    keyboard = [
        [InlineKeyboardButton("üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –§–ò–û —Ä–æ–¥–∏—Ç–µ–ª—è", callback_data="edit_parent_name")],
        [InlineKeyboardButton("üßí –§–ò–û —Ä–µ–±—ë–Ω–∫–∞", callback_data="edit_child_name")],
        [InlineKeyboardButton("üéÇ –í–æ–∑—Ä–∞—Å—Ç", callback_data="edit_age")],
        [InlineKeyboardButton("üè´ –ö–ª–∞—Å—Å", callback_data="edit_grade")],
        [InlineKeyboardButton("üéØ –¶–µ–ª—å –æ–±—É—á–µ–Ω–∏—è", callback_data="edit_goal")],
        [InlineKeyboardButton("üåç –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å", callback_data="edit_timezone")],
        [InlineKeyboardButton("üì± –ö–æ–Ω—Ç–∞–∫—Ç", callback_data="edit_contact")],
        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_edit")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    profile_text = (
        "üõ†Ô∏è **–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è**\n\n"
        "**–¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ:**\n"
        f"üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –§–ò–û —Ä–æ–¥–∏—Ç–µ–ª—è: {current_profile['parent_name']}\n"
        f"üßí –§–ò–û —Ä–µ–±—ë–Ω–∫–∞: {current_profile['child_name']}\n"
        f"üéÇ –í–æ–∑—Ä–∞—Å—Ç: {current_profile['age']}\n"
        f"üè´ –ö–ª–∞—Å—Å: {current_profile['grade']}\n"
        f"üéØ –¶–µ–ª—å –æ–±—É—á–µ–Ω–∏—è: {current_profile['goal']}\n"
        f"üåç –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {current_profile['timezone']}\n"
        f"üì± –ö–æ–Ω—Ç–∞–∫—Ç: {current_profile['contact']}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:"
    )

    await update.message.reply_text(
        profile_text,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

    # Remove keyboard
    await update.message.reply_text(
        "üîß –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...",
        reply_markup=ReplyKeyboardRemove()
    )

async def save_field_and_finish(update: Update, context: ContextTypes.DEFAULT_TYPE, field_name: str, new_value, field_display_name: str):
    """Save the edited field and return to main menu"""
    user_id = update.effective_user.id
    current_profile = context.user_data['current_profile']

    # Update the field
    current_profile[field_name] = new_value

    # Save to database
    save_user_profile(user_id, current_profile)

    await update.message.reply_text(
        f"‚úÖ {field_display_name} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!\n\n"
        f"–ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: **{new_value}**\n\n"
        f"–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...",
        reply_markup=ReplyKeyboardRemove(),
        parse_mode='Markdown'
    )

    # Clear user data and return to main menu
    context.user_data.clear()
    from handlers.profile import send_main_menu
    await send_main_menu(update, context)

async def go_to_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Go to main menu"""
    context.user_data.clear()
    await update.message.reply_text(
        "üè† –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...",
        reply_markup=ReplyKeyboardRemove()
    )
    from handlers.profile_handler import send_main_menu
    await send_main_menu(update, context)

async def cancel_edit(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Cancel profile editing"""
    context.user_data.clear()
    await update.message.reply_text(
        "‚ùå –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –æ—Ç–º–µ–Ω–µ–Ω–æ.",
        reply_markup=ReplyKeyboardRemove()
    )
    from handlers.profile_handler import send_main_menu
    await send_main_menu(update, context)

def edit_profile_conv_handler():
    """Create the conversation handler for profile editing"""
    return ConversationHandler(
        entry_points=[MessageHandler(filters.Text(["üõ†Ô∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å"]), edit_profile_start)],
        states={
            EDIT_FIELD_SELECT: [CallbackQueryHandler(handle_field_selection)],
            EDIT_PARENT_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, edit_parent_name)],
            EDIT_CHILD_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, edit_child_name)],
            EDIT_AGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, edit_age)],
            EDIT_GRADE: [MessageHandler(filters.TEXT & ~filters.COMMAND, edit_grade)],
            EDIT_GOAL: [MessageHandler(filters.TEXT & ~filters.COMMAND, edit_goal)],
            EDIT_TIMEZONE: [MessageHandler(filters.TEXT & ~filters.COMMAND, edit_timezone)],
            EDIT_CONTACT: [MessageHandler(filters.TEXT & ~filters.COMMAND, edit_contact)],
        },
        fallbacks=[
            CommandHandler("cancel", cancel_edit),
            MessageHandler(filters.Text(["‚ùå –û—Ç–º–µ–Ω–∞", "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]), cancel_edit)
        ],
        per_user=True
    )