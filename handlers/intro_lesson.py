from telegram import (
    Update,
    ReplyKeyboardMarkup,
    ReplyKeyboardRemove,
    KeyboardButton,
)
from telegram.ext import (
    ContextTypes,
    ConversationHandler,
    MessageHandler,
    CommandHandler,
    filters,
)
from config import CHANNEL_ID
from handlers.profile import send_main_menu
import re

# –≠—Ç–∞–ø—ã –∞–Ω–∫–µ—Ç—ã
(
    PARENT_NAME, CHILD_NAME, AGE, CLASS,
    GOAL, TIMEZONE_SELECT, TIMEZONE_MANUAL,
    SUBJECT_SELECTION, CONTACT_METHOD, CONTACT_INPUT, 
    CONFIRM, EDIT_SELECT, EDIT_FIELD
) = range(13)


CONFIRM_REPLY = ReplyKeyboardMarkup(
    [["‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"]],
    resize_keyboard=True,
    one_time_keyboard=True
)

TIMEZONES = ["GMT+3", "GMT+4", "GMT+5"]
TIMEZONE_REPLY = ReplyKeyboardMarkup(
    [[tz] for tz in TIMEZONES] + [["üå§Ô∏è –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é"]],
    resize_keyboard=True,
    one_time_keyboard=True
)

CONTACT_METHOD_REPLY = ReplyKeyboardMarkup(
    [["Telegram", "WhatsApp"]],
    resize_keyboard=True,
    one_time_keyboard=True
)

FIELDS = [
    ("parent_name", "üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –í–≤–µ–¥–∏—Ç–µ –§–ò–û —Ä–æ–¥–∏—Ç–µ–ª—è:"),
    ("child_name", "üßí –í–≤–µ–¥–∏—Ç–µ –§–ò–û —Ä–µ–±—ë–Ω–∫–∞:"),
    ("age", "üéÇ –í–æ–∑—Ä–∞—Å—Ç —Ä–µ–±—ë–Ω–∫–∞:"),
    ("school_class", "üè´ –í –∫–∞–∫–æ–º –∫–ª–∞—Å—Å–µ —Ä–µ–±—ë–Ω–æ–∫?"),
    ("goal", "üéØ –ö–∞–∫–∞—è —Ü–µ–ª—å –æ–±—É—á–µ–Ω–∏—è?"),
    ("timezone", "üåç –£–∫–∞–∂–∏—Ç–µ —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å:"),
    ("subjects", "üìò –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç—ã –∏–∑ –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–∞:")
]

# –î–∞–ª–µ–µ –∏–¥—É—Ç —Ñ—É–Ω–∫—Ü–∏–∏ delete_all_messages, save_message, –≤–∞–ª–∏–¥–∞—Ü–∏–∏, –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏ get_intro_lesson_handler –∫–∞–∫ –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–º –∫–æ–¥–µ. –ò—Ö –Ω—É–∂–Ω–æ –≤—Å—Ç–∞–≤–∏—Ç—å —Å—é–¥–∞ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π.

# –ß—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞—Ç—å –ø–æ–ª–µ, –≤—Å—Ç–∞–≤–∏–º —Ç–æ–ª—å–∫–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫. –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ ‚Äî –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–∑–±–∏—Ç—å –∫–æ–¥ –Ω–∞ —á–∞—Å—Ç–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.
async def delete_all_messages(context):
    for key in ['bot_messages', 'user_messages']:
        for msg in context.user_data.get(key, []):
            try:
                await msg.delete()
            except:
                pass
        context.user_data[key] = []

def save_message(context, message, who="bot"):
    key = 'bot_messages' if who == "bot" else 'user_messages'
    context.user_data.setdefault(key, []).append(message)

# –í–∞–ª–∏–¥–∞—Ü–∏—è

def is_text_only(value):
    return bool(re.match(r"^[–ê-–Ø–∞-—èA-Za-z\s\-]+$", value))

def is_age_valid(value):
    return value.isdigit() and 1 <= int(value) <= 18

def is_class_valid(value):
    return value.isdigit() and 1 <= int(value) <= 7

def is_telegram_username(value):
    return value.startswith("@") and len(value) > 1

def is_whatsapp_number(value):
    return bool(re.match(r"^\+7\s?\d{3}\s?\d{3}\s?\d{2}\s?\d{2}$", value))

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏

async def start_intro_lesson(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await delete_all_messages(context)
    context.user_data.clear()

    msg = await update.message.reply_text(FIELDS[0][1], reply_markup=ReplyKeyboardRemove())
    save_message(context, msg)
    save_message(context, update.message, "user")
    return PARENT_NAME

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE, field_index: int):
    save_message(context, update.message, "user")
    value = update.message.text
    key, prompt = FIELDS[field_index]

    if field_index == PARENT_NAME or field_index == CHILD_NAME:
        if not is_text_only(value):
            msg = await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç (–±–µ–∑ —Ü–∏—Ñ—Ä):")
            save_message(context, msg)
            return field_index
    elif field_index == AGE:
        if not is_age_valid(value):
            msg = await update.message.reply_text("‚ùå –í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º –æ—Ç 1 –¥–æ 18:")
            save_message(context, msg)
            return field_index
    elif field_index == CLASS:
        if not is_class_valid(value):
            msg = await update.message.reply_text("‚ùå –ö–ª–∞—Å—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º –æ—Ç 1 –¥–æ 7:")
            save_message(context, msg)
            return field_index

    context.user_data[key] = value
    await delete_all_messages(context)

    if field_index == GOAL:
        msg = await update.message.reply_text("üåç –í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å:", reply_markup=TIMEZONE_REPLY)
        save_message(context, msg)
        return TIMEZONE_SELECT

    msg = await update.message.reply_text(FIELDS[field_index + 1][1], reply_markup=ReplyKeyboardRemove())
    save_message(context, msg)
    return field_index + 1

async def handle_timezone_select(update: Update, context: ContextTypes.DEFAULT_TYPE):
    save_message(context, update.message, "user")
    tz = update.message.text
    if tz == "üî§ –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é":
        msg = await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å (–Ω–∞–ø—Ä–∏–º–µ—Ä, GMT+6):", reply_markup=ReplyKeyboardRemove())
        save_message(context, msg)
        return TIMEZONE_MANUAL
    else:
        context.user_data['timezone'] = tz
        await delete_all_messages(context)
        context.user_data["subjects"] = []
        return await handle_subject_selection(update, context)

async def handle_timezone_manual(update: Update, context: ContextTypes.DEFAULT_TYPE):
    save_message(context, update.message, "user")
    context.user_data['timezone'] = update.message.text
    await delete_all_messages(context)
    context.user_data["subjects"] = []
    return await handle_subject_selection(update, context)

async def handle_subject_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    subjects = context.bot_data.get("price_list", ["–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞", "–†—É—Å—Å–∫–∏–π", "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π"])
    user_input = update.message.text if update.message else None

    if user_input:
        save_message(context, update.message, "user")
        if user_input == "‚úÖ –ì–æ—Ç–æ–≤–æ":
            if not context.user_data['subjects']:
                msg = await update.message.reply_text("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –ø—Ä–µ–¥–º–µ—Ç.")
                save_message(context, msg)
                return SUBJECT_SELECTION
            msg = await update.message.reply_text("üì± –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π —Å–ø–æ—Å–æ–±:", reply_markup=CONTACT_METHOD_REPLY)
            save_message(context, msg)
            return CONTACT_METHOD
        elif user_input in context.user_data['subjects']:
            context.user_data['subjects'].remove(user_input)
        elif user_input in subjects:
            if len(context.user_data['subjects']) >= 3:
                msg = await update.message.reply_text("‚ùå –ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–µ –±–æ–ª–µ–µ 3 –ø—Ä–µ–¥–º–µ—Ç–æ–≤.")
                save_message(context, msg)
                return SUBJECT_SELECTION
            context.user_data['subjects'].append(user_input)

    await delete_all_messages(context)
    buttons = [[KeyboardButton(s)] for s in subjects]
    buttons.append([KeyboardButton("‚úÖ –ì–æ—Ç–æ–≤–æ")])
    selected = ", ".join(context.user_data.get("subjects", [])) or "‚Äî"
    msg = await update.message.reply_text(
        f"üìò –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç—ã –∏–∑ –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–∞:\n\n–í—ã –≤—ã–±—Ä–∞–ª–∏: {selected}",
        reply_markup=ReplyKeyboardMarkup(buttons, resize_keyboard=True)
    )
    save_message(context, msg)
    return SUBJECT_SELECTION

# –û—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π

async def handle_contact_method(update: Update, context: ContextTypes.DEFAULT_TYPE):
    save_message(context, update.message, "user")
    method = update.message.text
    context.user_data['contact_method'] = method

    if method == "Telegram":
        username = update.effective_user.username
        if username:
            contact = f"@{username}"
            context.user_data['contact'] = contact

            summary = "\n".join([
                f"{FIELDS[i][1]} {', '.join(context.user_data[FIELDS[i][0]]) if isinstance(context.user_data[FIELDS[i][0]], list) else context.user_data[FIELDS[i][0]]}"
                for i in range(len(FIELDS))
            ])
            summary += f"\nüìû –°–ø–æ—Å–æ–± —Å–≤—è–∑–∏: {context.user_data.get('contact_method', '‚Äî')} ({context.user_data.get('contact', '‚Äî')})"

            msg = await update.message.reply_text(f"üìã –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à–∏ –æ—Ç–≤–µ—Ç—ã:\n\n{summary}", reply_markup=CONFIRM_REPLY)
            save_message(context, msg)
            return CONFIRM
        else:
            msg = await update.message.reply_text(
                "‚ùå –£ –≤–∞—Å –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω Telegram username. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–± —Å–≤—è–∑–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, WhatsApp).",
                reply_markup=CONTACT_METHOD_REPLY
            )
            save_message(context, msg)
            return CONTACT_METHOD

    elif method == "WhatsApp":
        msg = await update.message.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ WhatsApp –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7 999 999 99 99:",
            reply_markup=ReplyKeyboardRemove()
        )
        save_message(context, msg)
        return CONTACT_INPUT

    else:
        msg = await update.message.reply_text(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ:",
            reply_markup=CONTACT_METHOD_REPLY
        )
        save_message(context, msg)
        return CONTACT_METHOD


async def handle_contact_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    save_message(context, update.message, "user")
    method = context.user_data['contact_method']
    contact = update.message.text
    if method == "Telegram":
        if not is_telegram_username(contact):
            msg = await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π Telegram username, –Ω–∞—á–∏–Ω–∞—è —Å @:")
            save_message(context, msg)
            return CONTACT_INPUT
    elif method == "WhatsApp":
        if not is_whatsapp_number(contact):
            msg = await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7 999 999 99 99:")
            save_message(context, msg)
            return CONTACT_INPUT
    context.user_data['contact'] = contact

    summary = "\n".join([
        f"{FIELDS[i][1]} {', '.join(context.user_data[FIELDS[i][0]]) if isinstance(context.user_data[FIELDS[i][0]], list) else context.user_data[FIELDS[i][0]]}" for i in range(len(FIELDS))
    ])
    summary += f"\nüìû –°–ø–æ—Å–æ–± —Å–≤—è–∑–∏: {context.user_data.get('contact_method', '‚Äî')} ({context.user_data.get('contact', '‚Äî')})"

    msg = await update.message.reply_text(f"üìã –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à–∏ –æ—Ç–≤–µ—Ç—ã:\n\n{summary}", reply_markup=CONFIRM_REPLY)
    save_message(context, msg)
    return CONFIRM

async def handle_confirmation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    save_message(context, update.message, "user")
    await delete_all_messages(context)
    text = update.message.text

    if text == "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å":
        summary = "\n".join([
            f"{FIELDS[i][1]} {', '.join(context.user_data[FIELDS[i][0]]) if isinstance(context.user_data[FIELDS[i][0]], list) else context.user_data[FIELDS[i][0]]}" for i in range(len(FIELDS))
        ])
        summary += f"\n\nüìû –°–ø–æ—Å–æ–± —Å–≤—è–∑–∏: {context.user_data.get('contact_method', '‚Äî')} ({context.user_data.get('contact', '‚Äî')})"

        await context.bot.send_message(chat_id=CHANNEL_ID, text=f"üì© –ù–æ–≤–∞—è –∞–Ω–∫–µ—Ç–∞:\n\n{summary}")
        msg = await update.message.reply_text("‚úÖ –°–ø–∞—Å–∏–±–æ! –ê–Ω–∫–µ—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.", reply_markup=ReplyKeyboardRemove())
        save_message(context, msg)
        context.user_data.clear()
        await send_main_menu(update, context)
        return ConversationHandler.END

    elif text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        await send_main_menu(update, context)
        context.user_data.clear()
        return ConversationHandler.END

    elif text == "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å":
        msg = await update.message.reply_text("üìù –ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?", reply_markup=EDIT_OPTIONS_REPLY)
        save_message(context, msg)
        return EDIT_SELECT

    else:
        msg = await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ:", reply_markup=CONFIRM_REPLY)
        save_message(context, msg)
        return CONFIRM
    
async def handle_edit_select(update: Update, context: ContextTypes.DEFAULT_TYPE):
    save_message(context, update.message, "user")
    text = update.message.text

    match = re.match(r"^(\d+)\. ", text)
    if match:
        field_index = int(match.group(1)) - 1
        context.user_data['edit_field_index'] = field_index
        await delete_all_messages(context)

        if field_index == len(FIELDS) - 1:  # SUBJECT_SELECTION
            context.user_data['subjects'] = []
            return await handle_subject_selection(update, context)

        if field_index == 5:  # TIMEZONE_SELECT
            msg = await update.message.reply_text("üåç –í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å:", reply_markup=TIMEZONE_REPLY)
            save_message(context, msg)
            return TIMEZONE_SELECT

        msg = await update.message.reply_text(FIELDS[field_index][1], reply_markup=ReplyKeyboardRemove())
        save_message(context, msg)

        return EDIT_FIELD
    else:
        msg = await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø—É–Ω–∫—Ç.", reply_markup=EDIT_OPTIONS_REPLY)
        save_message(context, msg)
        return EDIT_SELECT

async def handle_edit_field(update: Update, context: ContextTypes.DEFAULT_TYPE):
    field_index = context.user_data.get('edit_field_index')
    return await handle_text(update, context, field_index)

EDIT_OPTIONS_REPLY = ReplyKeyboardMarkup(
    [[f"{i + 1}. {FIELDS[i][1].strip('üßíüë®‚Äçüë©‚Äçüëß‚Äçüë¶üéÇüè´üéØüåçüìò:')}" for i in range(len(FIELDS))]],
    resize_keyboard=True,
    one_time_keyboard=True
)

async def cancel_intro(update: Update, context: ContextTypes.DEFAULT_TYPE):
    save_message(context, update.message, "user")
    await delete_all_messages(context)
    context.user_data.clear()
    msg = await update.message.reply_text("‚ùå –ê–Ω–∫–µ—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=ReplyKeyboardRemove())
    save_message(context, msg)
    await send_main_menu(update, context)
    return ConversationHandler.END

def get_intro_lesson_handler():
    return ConversationHandler(
        entry_points=[MessageHandler(filters.TEXT & filters.Regex("^üéì –í–≤–æ–¥–Ω—ã–π —É—Ä–æ–∫$"), start_intro_lesson)],
        states={
            PARENT_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, lambda u, c: handle_text(u, c, PARENT_NAME))],
            CHILD_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, lambda u, c: handle_text(u, c, CHILD_NAME))],
            AGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, lambda u, c: handle_text(u, c, AGE))],
            CLASS: [MessageHandler(filters.TEXT & ~filters.COMMAND, lambda u, c: handle_text(u, c, CLASS))],
            GOAL: [MessageHandler(filters.TEXT & ~filters.COMMAND, lambda u, c: handle_text(u, c, GOAL))],
            TIMEZONE_SELECT: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_timezone_select)],
            TIMEZONE_MANUAL: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_timezone_manual)],
            SUBJECT_SELECTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_subject_selection)],
            CONTACT_METHOD: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_contact_method)],
            CONTACT_INPUT: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_contact_input)],
            CONFIRM: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_confirmation)],
            EDIT_SELECT: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_edit_select)],
            EDIT_FIELD: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_edit_field)],
        },
        fallbacks=[CommandHandler("cancel", cancel_intro)],
        per_user=True,
        per_chat=True,
    )